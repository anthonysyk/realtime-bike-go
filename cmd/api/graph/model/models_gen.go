// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Query struct {
}

type Station struct {
	Code              string  `json:"code"`
	Name              string  `json:"name"`
	Location          *string `json:"location,omitempty"`
	Latitude          float64 `json:"latitude"`
	Longitude         float64 `json:"longitude"`
	Capacity          int32   `json:"capacity"`
	Ebike             int32   `json:"ebike"`
	Mechanical        int32   `json:"mechanical"`
	Numbikesavailable int32   `json:"numbikesavailable"`
	Numdocksavailable int32   `json:"numdocksavailable"`
	IsActive          bool    `json:"isActive"`
}

type StationSnapshot struct {
	Timestamp      time.Time `json:"timestamp"`
	BikesAvailable int32     `json:"bikesAvailable"`
	DocksAvailable int32     `json:"docksAvailable"`
}

type WindowPeriod string

const (
	WindowPeriodMin1  WindowPeriod = "MIN_1"
	WindowPeriodMin15 WindowPeriod = "MIN_15"
	WindowPeriodHour1 WindowPeriod = "HOUR_1"
	WindowPeriodDay   WindowPeriod = "DAY"
)

var AllWindowPeriod = []WindowPeriod{
	WindowPeriodMin1,
	WindowPeriodMin15,
	WindowPeriodHour1,
	WindowPeriodDay,
}

func (e WindowPeriod) IsValid() bool {
	switch e {
	case WindowPeriodMin1, WindowPeriodMin15, WindowPeriodHour1, WindowPeriodDay:
		return true
	}
	return false
}

func (e WindowPeriod) String() string {
	return string(e)
}

func (e *WindowPeriod) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WindowPeriod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WindowPeriod", str)
	}
	return nil
}

func (e WindowPeriod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *WindowPeriod) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e WindowPeriod) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
