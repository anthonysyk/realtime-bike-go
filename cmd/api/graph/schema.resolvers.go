package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.71

import (
	"context"
	"fmt"
	"github.com/anthonysyk/versatilego/sugar"
	"realtime-bike-go/cmd/api/graph/model"
	"time"
)

// AllStations is the resolver for the allStations field.
func (r *queryResolver) AllStations(ctx context.Context, code *string, name *string, activeOnly *bool) ([]*model.Station, error) {
	params := struct {
		code       string
		name       string
		activeOnly bool
	}{
		code:       sugar.PtrUnwrap(code, ""),
		name:       sugar.PtrUnwrap(name, ""),
		activeOnly: sugar.PtrUnwrap(activeOnly, false),
	}
	opendataStations, err := r.Store.ListStations(ctx, params.code, params.name)
	if err != nil {
		return nil, err
	}

	stations := make([]*model.Station, len(opendataStations))
	for idx, s := range opendataStations {
		stations[idx] = &model.Station{
			Code:              s.Stationcode,
			Name:              s.Name,
			Location:          sugar.Ptr(fmt.Sprintf("%s - %s", s.NomArrondissementCommunes, s.CodeInseeCommune)),
			Latitude:          s.CoordonneesGeo.Lat,
			Longitude:         s.CoordonneesGeo.Lon,
			Capacity:          int32(s.Capacity),
			Ebike:             int32(s.Ebike),
			Mechanical:        int32(s.Mechanical),
			Numbikesavailable: int32(s.Numbikesavailable),
			Numdocksavailable: int32(s.Numdocksavailable),
			IsActive:          s.IsActive(),
		}
	}

	return stations, nil
}

// StationTimeSeries is the resolver for the stationTimeSeries field.
func (r *queryResolver) StationTimeSeries(ctx context.Context, stationCode string, from time.Time, to time.Time, resolution *model.WindowPeriod) ([]*model.StationSnapshot, error) {
	panic(fmt.Errorf("not implemented: StationTimeSeries - stationTimeSeries"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
